name: "Terraform Deployment"

on:
  push:
    branches:
      - 'main'
    paths:
      - 'tf-infra/**'
  workflow_dispatch:
  workflow_run:
    workflows: [ "Infra Security Scan" ]  
    types:
      - completed

jobs:
  await-Pipeline-security:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
    - name: await-Pipeline-security
      run: echo "success..."

  terraform-deploy:
    needs: await-Pipeline-security 
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, staging, production]   
    environment: ${{ matrix.environment }} 
    permissions:
      actions: read
      contents: read
      id-token: write

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Download IMAGE_TAG_artifact
      uses: actions/download-artifact@v3
      with:
        name: image_tag
        path: ./artifact

    - name: Set IMAGE_TAG for workflow
      run: |
        IMAGE_TAG=$(cat ./artifact/image_tag.txt)
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.5.6'

    - name: Cache Plugins/Modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.terraform.d/plugin-cache
          .terraform
        key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
        restore-keys: |
          ${{ runner.os }}-terraform-

    - name: Terraform IVP
      run: |
        set -e
        cd tf-infra
        sed -i 's/{{TAGGED}}/${{ env.IMAGE_TAG }}/g' main.tf
        terraform init
        terraform validate
        terraform plan -out=tfplan
        terraform show -json tfplan > plan_output.json         

    - name: Approval Staging&Prod
      if: ${{ matrix.environment == 'staging' || matrix.environment == 'production' }}
      uses: hmarr/auto-approve-action@v3
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Terraform Apply
      run: |
        cd tf-infra
        terraform apply -auto-approve tfplan
        terraform output -json > terraform_output.json         

    - name: Commit tf-files to PR
      working-directory: tf-infra
      run: |
        git config --global user.name '${{ github.actor }}'
        git config --global user.email '${{ github.actor}}@users.noreply.github.com'
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
        git add ./\*.tf
        git commit -m "Add terraform resource files" && git push || { echo "Commit failed"; exit 1; }