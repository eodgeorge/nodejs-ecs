require('dotenv').config();
const express = require('express');
const { Pool } = require('pg');
const bodyParser = require('body-parser');
const client = require('prom-client');

const { CloudWatchClient, PutMetricDataCommand } = require('@aws-sdk/client-cloudwatch');

const cloudWatchClient = new CloudWatchClient({
    region: process.env.AWS_REGION || 'eu-west-2',
});

const app = express();
app.use(bodyParser.json());

// ==============================
const winston = require('winston');
require('winston-cloudwatch');

const cloudwatchTransport = new winston.transports.CloudWatch({
    logGroupName: process.env.LOG_GROUP_NAME || 'MyAppLogs', 
    logStreamName: 'MyAppStream', 
    awsRegion: process.env.AWS_REGION || 'eu-west-2',
    jsonMessage: true,
});

const logger = winston.createLogger({
    level: 'info',
    transports: [
        new winston.transports.Console({ format: winston.format.simple() }), 
        cloudwatchTransport
    ]
});
// ===============================

const fs = require('fs');
const path = require('path');

const logFilePath = path.join('/var/log', 'app.log');

const logToFile = (message) => {
    fs.appendFile(logFilePath, `${new Date().toISOString()} ${message}\n`, (err) => {
        if (err) console.error('Error writing log:', err);
    });
};

app.use((req, res, next) => {
    const start = Date.now();
    res.on('finish', () => {
        const duration = (Date.now() - start) / 1000;
        const logMessage = `[${new Date().toISOString()}] ${req.method} ${req.path} - ${res.statusCode} (${duration}s)`;
        
        if (process.env.LOGGING_ENABLED === 'true') {
            logToFile(logMessage);
        }
    });
    next();
});
// ===================

const pool = new Pool({
    user: process.env.DB_USER,
    host: process.env.DB_HOST,
    database: process.env.DB_NAME,
    password: process.env.DB_PASS,
    port: process.env.DB_PORT,
});

const collectDefaultMetrics = client.collectDefaultMetrics;
collectDefaultMetrics();

const httpRequestCounter = new client.Counter({
    name: 'http_requests_total',
    help: 'Total number of HTTP requests',
    labelNames: ['method', 'route', 'status'],
});

const httpRequestDuration = new client.Histogram({
    name: 'http_request_duration_seconds',
    help: 'Duration of HTTP requests in seconds',
    labelNames: ['method', 'route', 'status'],
    buckets: [0.1, 0.5, 1, 2, 5], 
});

const dbQueryDuration = new client.Histogram({
    name: 'db_query_duration_seconds',
    help: 'Duration of database queries',
    labelNames: ['query'],
    buckets: [0.01, 0.1, 0.5, 1, 2, 5],
});

app.use((req, res, next) => {
    const start = Date.now();
    res.on('finish', () => {
        const duration = (Date.now() - start) / 1000;
        httpRequestCounter.inc({ method: req.method, route: req.path, status: res.statusCode });
        httpRequestDuration.observe({ method: req.method, route: req.path, status: res.statusCode }, duration);

        if (process.env.LOGGING_ENABLED === 'true') {
            console.log(`[${new Date().toISOString()}] ${req.method} ${req.path} - ${res.statusCode} (${duration}s)`);
        }
    });
    next();
});

const queryWithMetrics = async (query, params) => {
    const start = Date.now();
    try {
        return await pool.query(query, params);
    } finally {
        const duration = (Date.now() - start) / 1000;
        dbQueryDuration.observe({ query }, duration);
    }
};

const checkDatabaseConnection = async () => {
    try {
        await pool.query('SELECT 1'); 
        console.log('Database is ready!');
    } catch (err) {
        console.error('Database connection failed:', err);
        process.exit(1);
    }
};

const initializeDatabase = async () => {
    try {
        await pool.query(`
            CREATE TABLE IF NOT EXISTS data (
                id SERIAL PRIMARY KEY,
                value TEXT NOT NULL
            );
        `);
        console.log('Table checked/created successfully.');
    } catch (err) {
        console.error('Error ensuring table existence:', err);
        process.exit(1);
    }
};

app.use(async (req, res, next) => {
    try {
        await pool.query('SELECT 1');
        next();
    } catch (err) {
        console.error('Database health check failed:', err);
        res.status(503).json({ error: 'Database unavailable' });
    }
});

app.get('/data', async (req, res) => {
    const start = Date.now();
    try {
        const result = await pool.query('SELECT * FROM data');
        res.json(result.rows);
    } catch (err) {
        console.error("Database error:", err);
        res.status(500).json({ error: err.message });
    } finally {
        const duration = (Date.now() - start) / 1000;
        dbQueryDuration.observe({ query: 'SELECT * FROM data' }, duration);
    }
});

app.post('/data', async(req, res) => {
    try {
        const { value } = req.body;
        if (!value) {
            return res.status(400).json({ error: 'Missing required field: value' });
        }
        await pool.query('INSERT INTO data (value) VALUES ($1)', [value]);
        res.status(201).json({ message: 'Data inserted successfully' });
    } catch (err) {
        console.error('Database error:', err);
        res.status(500).json({ error: err.message });
    }
});

app.get('/health', async (req, res) => {
    try {
        await pool.query('SELECT 1');
        res.status(200).json({ status: 'OK' });
    } catch (err) {
        res.status(503).json({ error: 'Database unavailable' });
    }
});

app.get('/metrics', async (req, res) => {
    res.set('Content-Type', client.register.contentType);
    res.end(await client.register.metrics());
});

// ========================
const logMetricsToCloudWatch = async () => {
    const metrics = [
        {
            MetricName: 'TotalHttpRequests',
            Dimensions: [{ Name: 'Application', Value: 'MyApp' }],
            Unit: 'Count',
            Value: httpRequestCounter.hashMap['method:GET,route:/data,status:200']?.value || 0,
        },
        {
            MetricName: 'DatabaseQueryDuration',
            Dimensions: [{ Name: 'Application', Value: 'MyApp' }],
            Unit: 'Seconds',
            Value: dbQueryDuration.hashMap['query:SELECT * FROM data']?.value || 0,
        },
    ];

    try {
        await cloudwatch.putMetricData({
            Namespace: 'ApplicationMetrics',
            MetricData: metrics,
        }).promise();
        console.log('Metrics pushed to CloudWatch');
    } catch (error) {
        console.error('Error pushing metrics to CloudWatch:', error);
    }
};

setInterval(logMetricsToCloudWatch, 60000);

const startServer = async () => {
    await checkDatabaseConnection();
    await initializeDatabase();
    
    const PORT = process.env.PORT || 3000;
    app.listen(PORT, () => {
        console.log(`Server running on port ${PORT}`);
    });
};

startServer();

// app.get('/health', (req, res) => {
//     res.sendStatus(200);
// });

// const port = process.env.PORT || 3001;
// app.listen(port, () => {
//     console.log(`Server is listening on port ${port}`);
// });

// app.get('/data', async(req, res) => {
//     try {
//         const result = await pool.query('SELECT * FROM data');
//         res.json(result.rows);
//     } catch (err) {
//         console.error("Database error:", err);
//         res.status(500).json({ error: err.message });
//     }
// })



// ================================================

// const express = require('express');
// const { Pool } = require('pg');
// const bodyParser = require('body-parser');
// const client = require('prom-client'); // For Prometheus metrics
// const AWS = require('aws-sdk'); // AWS SDK for CloudWatch
// require('dotenv').config(); // Load environment variables
// const winston = require('winston');
// require('winston-cloudwatch');

// // Set up CloudWatch logging
// const cloudwatchTransport = new winston.transports.CloudWatch({
//     logGroupName: process.env.LOG_GROUP_NAME || 'MyAppLogs', // CloudWatch log group name
//     logStreamName: 'MyAppStream', // CloudWatch log stream name
//     awsRegion: process.env.AWS_REGION || 'us-east-1', // AWS region
//     jsonMessage: true,
// });

// // Create a logger with CloudWatch transport
// const logger = winston.createLogger({
//     level: 'info',
//     transports: [
//         new winston.transports.Console({ format: winston.format.simple() }), // Log to console
//         cloudwatchTransport // Log to CloudWatch
//     ]
// });

// const app = express();
// app.use(bodyParser.json());

// // PostgreSQL connection pool
// const pool = new Pool({
//     user: process.env.DB_USER,
//     host: process.env.DB_HOST,
//     database: process.env.DB_NAME,
//     password: process.env.DB_PASS,
//     port: process.env.DB_PORT,
// });

// // CloudWatch configuration
// const cloudwatch = new AWS.CloudWatch({ region: process.env.AWS_REGION });

// // Prometheus metrics setup
// const httpRequestCounter = new client.Counter({
//     name: 'http_requests_total',
//     help: 'Total HTTP requests',
//     labelNames: ['method', 'route', 'status'],
// });

// const dbQueryDuration = new client.Histogram({
//     name: 'db_query_duration_seconds',
//     help: 'Duration of database queries',
//     labelNames: ['query'],
// });

// client.collectDefaultMetrics(); // Collects default system metrics

// // Function to check database readiness
// const checkDatabaseConnection = async () => {
//     try {
//         await pool.query('SELECT 1');
//         logger.info('Database is ready!');
//     } catch (err) {
//         logger.error('Database connection failed:', err);
//         process.exit(1);
//     }
// };

// // Ensure table exists
// const initializeDatabase = async () => {
//     try {
//         await pool.query(`
//             CREATE TABLE IF NOT EXISTS data (
//                 id SERIAL PRIMARY KEY,
//                 value TEXT NOT NULL
//             );
//         `);
//         logger.info('Table checked/created successfully.');
//     } catch (err) {
//         logger.error('Error ensuring table existence:', err);
//         process.exit(1);
//     }
// };

// // Middleware for logging requests
// app.use((req, res, next) => {
//     const start = Date.now();
//     res.on('finish', () => {
//         const duration = (Date.now() - start) / 1000;
//         httpRequestCounter.inc({ method: req.method, route: req.path, status: res.statusCode });

//         if (process.env.LOGGING_ENABLED === 'true') {
//             logger.info(`[${new Date().toISOString()}] ${req.method} ${req.path} - ${res.statusCode} (${duration}s)`);
//         }
//     });
//     next();
// });

// // Metrics endpoint for Prometheus
// app.get('/metrics', async (req, res) => {
//     res.set('Content-Type', client.register.contentType);
//     res.end(await client.register.metrics());
// });

// // API endpoints
// app.get('/data', async (req, res) => {
//     const start = Date.now();
//     try {
//         const result = await pool.query('SELECT * FROM data');
//         res.json(result.rows);
//     } catch (err) {
//         logger.error("Database error:", err);
//         res.status(500).json({ error: err.message });
//     } finally {
//         const duration = (Date.now() - start) / 1000;
//         dbQueryDuration.observe({ query: 'SELECT * FROM data' }, duration);
//     }
// });

// app.post('/data', async (req, res) => {
//     try {
//         const { value } = req.body;
//         if (!value) {
//             return res.status(400).json({ error: 'Missing required field: value' });
//         }
//         await pool.query('INSERT INTO data (value) VALUES ($1)', [value]);
//         res.status(201).json({ message: 'Data inserted successfully' });
//     } catch (err) {
//         logger.error('Database error:', err);
//         res.status(500).json({ error: err.message });
//     }
// });

// // Health check endpoint
// app.get('/health', async (req, res) => {
//     try {
//         await pool.query('SELECT 1');
//         res.status(200).json({ status: 'OK' });
//     } catch (err) {
//         res.status(503).json({ error: 'Database unavailable' });
//     }
// });

// // Function to push metrics to CloudWatch
// const logMetricsToCloudWatch = async () => {
//     const metrics = [
//         {
//             MetricName: 'TotalHttpRequests',
//             Dimensions: [{ Name: 'Application', Value: 'MyApp' }],
//             Unit: 'Count',
//             Value: httpRequestCounter.hashMap['method:GET,route:/data,status:200']?.value || 0,
//         },
//         {
//             MetricName: 'DatabaseQueryDuration',
//             Dimensions: [{ Name: 'Application', Value: 'MyApp' }],
//             Unit: 'Seconds',
//             Value: dbQueryDuration.hashMap['query:SELECT * FROM data']?.value || 0,
//         },
//     ];

//     try {
//         await cloudwatch.putMetricData({
//             Namespace: 'ApplicationMetrics',
//             MetricData: metrics,
//         }).promise();
//         logger.info('Metrics pushed to CloudWatch');
//     } catch (error) {
//         logger.error('Error pushing metrics to CloudWatch:', error);
//     }
// };

// // Push metrics to CloudWatch every 60 seconds
// setInterval(logMetricsToCloudWatch, 60000);

// // Start server
// const startServer = async () => {
//     await checkDatabaseConnection();
//     await initializeDatabase();

//     const PORT = process.env.PORT || 3000;
//     app.listen(PORT, () => {
//         logger.info(`Server running on port ${PORT}`);
//     });
// };

// startServer();
